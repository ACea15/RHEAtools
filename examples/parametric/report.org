#+TITLE: High Fidelity Flutter Assessment of a Strut-Braced Wing Aircraft
#+AUTHOR: Alvaro Cea and Rafael Palacios
#+OPTIONS: toc:nil
#+LATEX_HEADER: \usepackage[margin=1in]{geometry}
#+LATEX_HEADER: \usepackage[margin=1in]{geometry}
#+LATEX_HEADER: \usepackage[utf8]{inputenc}
#+LATEX_HEADER: \usepackage{graphicx}
#+LATEX_HEADER: \usepackage{amsmath}
#+LATEX_HEADER: \usepackage[version=4]{mhchem}
#+LATEX_HEADER: \usepackage{siunitx}
#+LATEX_HEADER: \usepackage{longtable,tabularx}
#+LATEX_HEADER: \setlength\LTleft{0pt} 
#+LATEX_HEADER: \usepackage{caption}
#+LATEX_HEADER: \usepackage{subcaption}
#+LATEX_HEADER: \usepackage{comment}
#+LATEX_HEADER: \usepackage{lineno} 
#+LATEX_HEADER: \usepackage{setspace}
#+LATEX_HEADER: \doublespacing
#+LATEX_HEADER: \usepackage[colorinlistoftodos,textsize=tiny]{todonotes}
#+LATEX_HEADER: \usepackage{algorithm}
#+LATEX_HEADER: \usepackage{algpseudocode}
#+LATEX_HEADER: \usepackage{amssymb}
#+LATEX_HEADER: \usepackage{hyperref}

#+begin_comment
#+LATEX_HEADER: \let\oldsection\section
#+LATEX_HEADER: \renewcommand{\section}{\clearpage\oldsection}
#+LATEX_HEADER: \let\oldsubsection\subsection
#+LATEX_HEADER: \renewcommand{\subsection}{\clearpage\oldsubsection}
#+end_comment

* House keeping :noexport:
#+begin_src elisp :results none :tangle no :exports none
  (add-to-list 'org-structure-template-alist
    '("sp" . "src python :session py1"))
  (add-to-list 'org-structure-template-alist
    '("se" . "src elisp"))

  (setq org-confirm-babel-evaluate nil)
  (setq org-latex-pdf-process (list "latexmk -f -pdf -interaction=nonstopmode -output-directory=%o %f"))
  (setq org-image-actual-width nil)

  (defun org/get-headline-string-element  (headline backend info)
    (let ((prop-point (next-property-change 0 headline)))
      (if prop-point (plist-get (text-properties-at prop-point headline) :parent))))

  (defun org/ensure-latex-clearpage (headline backend info)
    (when (org-export-derived-backend-p backend 'latex)
      (let ((elmnt (org/get-headline-string-element headline backend info)))
        (when (member "newpage" (org-element-property :tags elmnt))
          (concat "\\clearpage\n" headline)))))

  (add-to-list 'org-export-filter-headline-functions
               'org/ensure-latex-clearpage)

  (setq local_root (concat default-directory "../../"))
#+end_src

#+begin_src emacs-lisp  :session py1 :results none :tangle nil :exports none
  (pyvenv-workon "nastran")
  (require 'org-tempo)
#+end_src
* Load modules :noexport:
#+begin_src python :session py1 :results none :var dir1=(print local_root)
  import sys
  import numpy as np
  sys.path.append(dir1)
  import src.parametric_analysis
  import plotly.express as px
  import pandas as pd
  import pathlib
  import matplotlib.pyplot as plt
  from tabulate import tabulate
  from pyNastran.op2.op2 import OP2
#+end_src
* Boilerplate src :noexport:
#+name: pd2org
#+begin_src python :var df="df" :exports none
  return f"return tabulate({df}, headers={df}.columns, tablefmt='orgtbl')"
#+end_src

#+RESULTS: pd2org
: return tabulate(df, headers=df.columns, tablefmt='orgtbl')

#+name: savefig
#+begin_src python :var figname="plot.svg" width=5 height=5 :exports none
  return f"""plt.savefig('{figname}')
  '{figname}'"""
#+end_src

#+RESULTS: savefig
: plt.savefig('plot.svg')
: 'plot.svg'

* Diagram                                                          :noexport:

#+begin_src plantuml :file img/process.png
file file
#+end_src

#+RESULTS:
[[file:img/process.png]]

* Read results :noexport:
:PROPERTIES:
:header-args: :eval never-export :exports none
:END:

#+RESULTS:

#+begin_src python :session py1  :results value

  def get_files(folder_path):

      file_paths = []
      file_names = []
      _dir = pathlib.Path(folder_path)
      for i in _dir.glob("**/*.f06"):
          file_paths.append(str(i))
          file_names.append(i.parent.name)
      return file_paths, file_names

  main_folder = '/'.join(([si for si in sys.path if "RHEAtools" in si][0].split('/')[:[si for si
                                                                                       in sys.path if "RHEAtools" in si][0].split('/').index("RHEAtools")+1]))
  #main_folder += "/data/nastran_studies/parametric_analysis078M"
  file_103 = main_folder + "/data/in/SOL103tailless/polimi-103cam.op2"
  #file_103 = main_folder + "/data/nastran_studies/SOL103tailless/polimi-103cam.op2"
  op2 = OP2()
  # op2.set_additional_matrices_to_read({b'OPHP': False, b'OPHKS':False})
  op2.read_op2(file_103)
  eig1 = op2.eigenvectors[1]
  natural_frequencies = [2*np.pi * cyc for cyc in eig1.mode_cycles]
  #main_folder += "/data/nastran_studies/parametric_analysis078M"
  main_folder += "/data/out/parametric_analysis078M"
  file_paths, file_names = get_files(main_folder)

  collector_list = ['sol145']
  collector = {ci: None for ci in collector_list}
  # #results = src.parametric_analysis.build_flutter(main_folder, files, Modes=range(10), collector=collector)
  results = src.parametric_analysis.build_flutter2(file_paths, file_names, Modes=range(10), collector=collector)

  def get_parametric_vars(vars_set, file_names):
      parametric_vars = dict()
      for fi in file_names:
          var = '_'.join(fi.split("_")[:-1])
          for ki, vi in vars_set.items():
              if ki in var and var not in parametric_vars.keys():
                  parametric_vars[var] = vi
      return parametric_vars

  vars_set = dict(shift_conm2s=[0., -0.05, -0.1, -0.15, -0.2, -0.25, 0.05, 0.1, 0.15, 0.2, 0.25],
                  CHORD_EXTENSION=[0.7, 0.85, 1., 1.1, 1.2, 1.3],
                  shift_panels_tailless=[-0.25, -0.2, -0.15, -0.1, 0.,  0.1, 0.15, 0.2, 0.25])
  parametric_vars = get_parametric_vars(vars_set, file_names)
  # parametric_vars = {}
  # parametric_vars = {f"shift_conm2s_M{i}": [0., -0.05, -0.1, -0.15, -0.2, -0.25, 0.05, 0.1, 0.15, 0.2, 0.25] for i in [15, 25]}
  # parametric_vars = {f"shift_conm2s_oldM{i}": [0., -0.05, -0.1, -0.15, -0.2, -0.25, 0.05, 0.1, 0.15, 0.2, 0.25] for i in [15, 25]}
  # parametric_vars.update({f"shift_panels_M{i}": [-0.25, -0.2, -0.15, -0.1, 0.,  0.1, 0.15, 0.2, 0.25] for i in [15, 25]})
  # parametric_vars.update({f"shift_panels_oldM{i}": [-0.25, -0.2, -0.15, -0.1, 0.,  0.1, 0.15, 0.2, 0.25] for i in [15, 25]})
  # parametric_vars.update({f"CHORD_EXTENSION_M{i}": [0.7, 0.85, 1., 1.1, 1.2, 1.3] for i in [15, 25]})
  # parametric_vars.update({f"shift_conm2s_LM{i}": [0., -0.05, -0.1, -0.15, -0.2, -0.25, 0.05, 0.1, 0.15, 0.2, 0.25] for i in [15, 25]})
  # parametric_vars.update({f"shift_panels_LM{i}": [-0.25, -0.2, -0.15, -0.1, 0.,  0.1, 0.15, 0.2, 0.25] for i in [15, 25]})
  #parametric_vars.update({f"CHORD_EXTENSION_tailless{i}": [0.7, 0.85, 1., 1.1, 1.2] for i in [15, 25]})
  # parametric_vars.update({f"CHORD_EXTENSION_oldM{i}": [0.7, 0.85, 1., 1.1, 1.2, 1.3] for i in [25]})

  results_df = src.parametric_analysis.build_results_df(file_names,
                                                        parametric_vars,
                                                        results)
  "Data read!"
#+end_src

#+RESULTS:
: Data read!


* Introduction

#+CAPTION: SBW challenges  
#+ATTR_LATEX: :width 0.75\textwidth 
[[./img/SBW_challenges.png]]

* Methods
# \input{methods.tex}
* Computational process and tools
<<sec:processes>>
** SU2 implementation
** Mapping and deformation of aerodynamic mesh
Process built to create modal shapes:
- Run Nastran 103 solution.
- Read the beam and rigid connectors (RBE2s) positions from .bdf file and corresponding displacements from .op2 file.
- Select a number of chordwise divisions and build the data matrix of locations and displacements.
- Create Paraview file from data.

#+ATTR_LATEX: :width 0.8\textwidth 
[[./img/interpolation.pdf]]
** Parametric Nastran models and flutter
** Main interface
\newpage
* Structural and aerodynamic models
Two different models have been combined for the aeroelastic analysis and are overlapped in Fig. [[combined_models]]. The structural model provided by PoliMi is based on beams to which lifting panels are attached; the high fidelity aerodynamic mesh was provided by ONERA and our partners at Strathclyde adapted to the SU2 mesh used herein. The mismatch in the strut-wing attachment point is not negligible, however, we believe this will not be critical in the mapping of deformations from the panels to the mesh using radial-basis functions that smooth out discrepancies. It is due further developments in the structural model while the mesh was not updated.  

#+NAME: combined_models
#+CAPTION: Combined models from ONERA (CFD mesh) and and PoliMi (panels representation from structural model)
#+ATTR_LATEX: :width 0.85\textwidth 
[[./img/su2_polimi-ref.png]]

The first ten structural natural frequencies are given in Table [[modal_freqs]]. Note the existence of symmetric and anti-symmetric modes in the wing with very close frequencies. These are depicted in Fig. [[modal_shapes_panels]].  
#+NAME: Model-natural_freqs
#+begin_src python :session py1 :results raw :exports results 
  modes_  = range(1, 11)
  df_  = pd.DataFrame({'Mode': modes_, 'Natural freqs. [rads/s]':natural_frequencies[:len(modes_)]})
  #df_ = df_.rename(columns={"xlabel": "factor"})
  #df_['flutter_mode']+=1
  #df_["factor"] = [0.75, 0.9, 1., 1.1, 1.2]
  tabulate(df_, headers=df_.columns,showindex=False, tablefmt='orgtbl')
  #plt.plot(modes_influtter, flutter_speeds)
#+end_src

#+NAME: modal_freqs
#+CAPTION: First ten natutal frequencies of the win-fuselage structural model. 
#+RESULTS: Model-natural_freqs
| Mode | Natural freqs. [rads/s] |
|------+-------------------------|
|    1 |                 4.79648 |
|    2 |                 5.08188 |
|    3 |                 10.6141 |
|    4 |                 11.4289 |
|    5 |                 12.0282 |
|    6 |                 12.6861 |
|    7 |                 17.4762 |
|    8 |                 18.7355 |
|    9 |                 23.4287 |
|   10 |                 23.5248 |


#+CAPTION: First five structural modes
#+NAME: modal_shapes_panels
#+ATTR_LATEX: :width 0.99\textwidth 
[[./img/modes.pdf]]
The panel shapes have been constructed from the beam-model displacements and rotations. At each panel corner there will be a radial-basis kernel mapping displacements from the panels onto the CFD moving markers (the solid boundaries of wing and strut). This is described in the following section. 

\newpage
** Mesh deformation of modal shapes
With the deformation of wing and strut obtained from interpolation for each modal shape, a mesh deformation scheme within SU2 is launched in order to attain a suitable model for the CFD. It was found that while convergence of the mesh deformation routines could be achieved relatively easy by tweaking the nonlinear steps and the total number of iterations, the resulting mesh would not yield good steady simulations as explained next.
Fig \ref{fig:Modes3D} helps to visualize and also validate the process described in Sec. [[sec:processes]]. The wing panels fall approximately in the mid-plane of the wing mesh and that remains true after deformation; the strut undergoes similar deformations in both models but it is not coincident since that is not the case in the reference models.  
#+BEGIN_EXPORT latex
\begin{figure}
     \centering
     \begin{subfigure}[b]{0.99\textwidth}
         \centering
         \includegraphics[width=\textwidth]{./img/M0-15A-3D_Panels.png}
         \caption{Mode 1}
     \end{subfigure}
     \begin{subfigure}[b]{0.99\textwidth}
         \centering
         \includegraphics[width=\textwidth]{./img/M4-15A-3D_Panels.png}
         \caption{Mode 5}
     \end{subfigure}
        \caption{Deformed mesh (in blue), aerodynamic panels (red-green) and reference mesh (transparent grey)}
        \label{fig:Modes3D}
\end{figure}
#+END_EXPORT

\newpage
** CFD steady simulations in SU2
Euler-based steady simulations need are solved before any harmonic balance solution is setup since the latter is based on the former and no convergence will be attain if the steady state cannot be found. As such, we performed first steady simulations around the modal shapes given by the structural mode. While major issues were not encountered for the reference case, we found serious difficulties getting sensible results after deforming the mesh. An example is Fig. [[non-convergedCFD]] which illustrates a non-converged solution of the first modal shape. 
#+CAPTION: Non-converged CFD simulation around a deformed shape 
#+NAME: non-convergedCFD
#+ATTR_LATEX: :width 0.75\textwidth 
[[./img/cfd_notworking.pdf]]
Fixing this required the introduction various artefacts:
- Filtering root displacements: because the structural model is clamped at the symmetry plane, but the wing and strut are attached to the fuselage, displacements, even if not visible, would be present at the attachment. A Sigmoid function was plugged into the deformation process that brings displacements to virtually zero at the attachment.
- Making the residual criteria of the mesh deformation very small: the convergence tolerance of the linear deformation solver was set to $10^{-15}$; values below $10^{-10}$ would produce meshes where the CFD would not converge.
- Changing the deformation technique to Inverse Volume. 
With this, successful simulations could be obtained and Fig. \ref{fig:Modes3D} shows the pressure coefficient profile of three interesting modes, along with the solution around the reference. 
 
#+BEGIN_EXPORT latex
\begin{figure}
     \centering
     \begin{subfigure}[b]{0.99\textwidth}
         \centering
         \includegraphics[width=\textwidth]{./img/M0-15A-STEADY.pdf}
         \caption{Mode 1}
     \end{subfigure}
     \begin{subfigure}[b]{0.99\textwidth}
         \centering
         \includegraphics[width=\textwidth]{./img/M4-15A-STEADY.pdf}
         \caption{Mode 5}
     \end{subfigure}
     \begin{subfigure}[b]{0.99\textwidth}
         \centering
         \includegraphics[width=\textwidth]{./img/M7-15A-STEADY.pdf}
         \caption{Mode 7}
     \end{subfigure}     
        \caption{Front and side views of the Cp field around the reference configuration and the modal shapes}
        \label{fig:Modes3D}
\end{figure}
#+END_EXPORT

\newpage
* Baseline Flutter analysis 
:PROPERTIES:
:header-args: :var name=(org-element-property :name (org-element-context)) :session py1
:END:
The flutter analysis on the reference configuration reveals the instability is triggered before the design cruise speed: considering the flight conditions used by PoliMi in the structural sizing ($U_\infty = 252.8 m/s$ $M_\infty = 0.78$, $Altitude = 7000 m$) the flutter speed is found at  \approx 170 m/s (33% below cruise speed), as presented in Table [[tab:flutter_ref]]: a convergence analysis with the number of modes is shown as well as the mode that crosses the 0-axis thus becoming unstable. Moreover, this table displays the good agreement in the calculation by Nastran alone and our in-house algorithms, thus serving as validation.  
#+NAME: FLUTTER-baseline
#+begin_src python  :results raw :exports results
  modes_influtter  = [6, 10, 15, 25]
  gafs_flutter = [173.0, 165.0, 169.7, 170.4]
  flutter_speeds = [results[f'shift_conm2s_tailless{i}_0']['FlutterSpeed'] for i in modes_influtter]
  df_  = pd.DataFrame({'Num. Modes': modes_influtter, 'flutter Nastran':flutter_speeds,
                       'flutter GAFs': gafs_flutter})
  #df_ = df_.rename(columns={"xlabel": "factor"})
  #df_['flutter_mode']+=1
  #df_["factor"] = [0.75, 0.9, 1., 1.1, 1.2]
  tabulate(df_, headers=df_.columns,showindex=False, tablefmt='orgtbl')
  #plt.plot(modes_influtter, flutter_speeds)
#+end_src

#+NAME: tab:flutter_ref
#+CAPTION: Flutter analysis calculated via Nastran and via the output GAFs
#+RESULTS: FLUTTER-baseline
| Num. Modes | flutter Nastran | flutter GAFs |
|------------+-----------------+--------------|
|          6 |         173.027 |          173 |
|         10 |         164.922 |          165 |
|         15 |         169.786 |        169.7 |
|         25 |         170.423 |        170.4 |


The damping and frequency evolution with velocity is used normally to present and understand the flutter results and these are depicted in Fig. [[fig:vgvf_ref_nastran]].
#+NAME: VgVfref-shift_conm2s_tailless25_0
#+begin_src python  :results value file  :exports results 
  fig1 = f"./img/{name}.png"
  results[name.split("-")[-1]]['sol145'].obj.plot_vg_vf(modes=range(1, 16),
                                                        ylim_damping=[-0.02, 0.03],
                                                        ylim_freq=[0.2, 5.5],
                                                        legend=True)
  #<<savefig(figname=fig1)>>
  plt.savefig(fig1)
  #plt.close()
  fig1
#+end_src

#+NAME: fig:vgvf_ref_nastran
#+CAPTION: Vg-Vf analysis performed in Nastran for the reference configuration
#+ATTR_LATEX: :width 0.65\textwidth 
#+RESULTS: VgVfref-shift_conm2s_tailless25_0
[[file:./img/VgVfref-shift_conm2s_tailless25_0.png]]

Similarly, in the analysis performed using our own PK algorithm, we start with the GAFs extracted from the DLM for the first five modes, along with a smooth interpolation between the points, as plotted in [[fig:gafs]]. They encapsulate the input/output relationship between modal displacements and forces. 
#+NAME: fig:gafs
#+CAPTION: GAFs of the first 5 modes, reduced frequencies from 0 to 1, imaginary (circles) and real (squares) parts.
#+ATTR_LATEX: :width 0.8\textwidth
[[./img/GAFs5x5.pdf]]
Assembling Eqs. \eqref{csdhb}, we can also compute the root-locus and Vg-Vf diagrams as shown in Figs. [[fig:root_locus_ref]] and [[fig:vg_vf_ref]]. 
#+NAME: fig:root_locus_ref
#+CAPTION: Root locus analysis in for the reference configuration using the GAFs
#+ATTR_LATEX: :width 0.9\textwidth
[[./img/root_locus.pdf]]


#+NAME: fig:vg_vf_ref
#+CAPTION: Vg-Vf analysis in for the reference configuration using the GAFs
#+ATTR_LATEX: :width 0.99\textwidth
[[./img/vgvf.pdf]]

*** CFD-enhanced analysis
A pure solution of flutter via the Harmonic Balance proved unsuccessful due to the lack of convergence of the solvers at the frequencies needed for the solution. Likely explanations are: an implementation that is not mature enough or the fluid solvers themselves not being robust; the mesh provided that was created for pure steady solutions; the concept may exhibit complex physics outside the exact design point.      
Precisely on this last point, our colleagues at Strathclyde have performed a parametric analysis slightly changing the flow conditions and have found the flow becomes unsteady thereby causing the failure of the steady solvers.
# A preliminary assessment indicates a stronger shock at the strut due to the interaction with the fairing, and spanwise oscillation in the shock wave leading to buffeting.  
\\
It is not surprise that in industrial practice, where the complexity of the models poses the biggest challenges, the flutter analysis is still predominately based on DLM calculations --enhanced by CFD simulations when possible. We thus follow the same approach here, and improve our DLM simulations with the data from the Harmonic Balance at very low frequencies where it converged. Effectively this is adding effects such as thickness and (steady) shock waves, which are the main physics over sought by the DLM.     

\newpage
* Parametric analysis for flutter relief
:PROPERTIES:
:header-args: :var name=(org-element-property :name (org-element-context)) :session py1
:END:
Since the reference design was not designed with flutter constraints and the analysis reveals severe issues, we set up to use our tools to explore possibilities enlarge the flutter margins. These are not definitive but can give good insights for future endeavours in SBW configurations.   
The parametric assessment has included the following:
  - Increase the strut size
  - Movement of strut masses
  - Shifting of strut aerodynamic panels
** Strut-stretching case
Making a bigger strut seemed the first plausible option to improve the stability of the reference configuration. A Factor, $\alpha$, is applied to the chord dimension along the strut, while the thickness-to-chord ratio of the airfoils is kept constant. The structural model is scaled accordingly, increasing the beam area by $\alpha^2$ and the moment of inertia by $\alpha^4$.
In [[tab:flutter_chordextension]] we can see that indeed significant improvements can be attained.

#+NAME: FLUTTER-CHORD_EXTENSION_tailless25
#+begin_src python :session py1 :results raw :exports results
  df_ = results_df[name.split("-")[-1]]
  df_ = df_.rename(columns={"xlabel": "factor"})
  df_['flutter_mode']+=1
  df_ = df_.iloc[1:-1] 
  #df_["factor"] = [0.75, 0.9, 1., 1.1, 1.2]
  tabulate(df_, headers=df_.columns,showindex=False, tablefmt='orgtbl')
#+end_src

#+NAME: tab:flutter_chordextension
#+CAPTION: Flutter assessment when changing the strut chord
#+RESULTS: FLUTTER-CHORD_EXTENSION_tailless25
| flutter | flutter_mode | factor |
|---------+--------------+--------|
| 152.665 |            5 |   0.85 |
| 170.423 |            3 |      1 |
| 203.342 |            3 |    1.1 |
| 193.152 |           10 |    1.2 |

More details into these results are provided next.
*** Factor \alpha= 0.85
If the strut was to be made even smaller, the flutter speed would be reduced. Fig. [[fig:vg_vf_chordextension085]] also shows that the mode that first becomes unstable changes from 3 to 5. 
#+NAME: VgVf-CHORD_EXTENSION_tailless25_1
#+begin_src python  :results value file  :exports results 
  fig1 = f"./img/{name}.png"
  results[name.split("-")[-1]]['sol145'].obj.plot_vg_vf(modes=range(1, 16),
                                                        ylim_damping=[-0.07, 0.03],
                                                        ylim_freq=[0.1, 5.],
                                                        legend=True)
  #<<savefig(figname=fig1)>>
  plt.savefig(fig1)
  #plt.close()
  fig1
#+end_src

#+CAPTION: Vg-Vf analysis for the strut extension, \alpha = 0.85
#+NAME: fig:vg_vf_chordextension085
#+ATTR_LATEX: :width 0.65\textwidth 
#+RESULTS: VgVf-CHORD_EXTENSION_tailless25_1
[[file:./img/VgVf-CHORD_EXTENSION_tailless25_1.png]]

*** Factor \alpha= 1.1
As seen in the damping evolution of Fig. [[fig:vg_vf_chordextension11]], a 10% increase in the structural factor $\alpha$ leads to a nearly 20% rise in the flutter. 
#+NAME: VgVf-CHORD_EXTENSION_tailless25_3
#+begin_src python  :results value file  :exports results 
  fig1 = f"./img/{name}.png"
  results[name.split("-")[-1]]['sol145'].obj.plot_vg_vf(modes=range(1, 16),
                                                        ylim_damping=[-0.07, 0.03],
                                                        ylim_freq=[0.1, 5.],
                                                        legend=True)
  #<<savefig(figname=fig1)>>
  plt.savefig(fig1)
  #plt.close()
  fig1
#+end_src

#+CAPTION: Vg-Vf analysis for the strut extension, \alpha = 1.1
#+NAME: fig:vg_vf_chordextension11
#+ATTR_LATEX: :width 0.65\textwidth 
#+RESULTS: VgVf-CHORD_EXTENSION_tailless25_3
[[file:./img/VgVf-CHORD_EXTENSION_tailless25_3.png]]
*** Factor \alpha= 1.2
What Fig. [[fig:vg_vf_chordextension12]] illustrates is that stability and strut-size don't correlate monotonically. The  Thus this can be a good variable to include as part of an optimization problem.   
#+NAME: VgVf-CHORD_EXTENSION_tailless25_4
#+begin_src python  :results value file  :exports results 
  fig1 = f"./img/{name}.png"
  results[name.split("-")[-1]]['sol145'].obj.plot_vg_vf(modes=range(1, 16),
                                                        ylim_damping=[-0.07, 0.03],
                                                        ylim_freq=[0.1, 5.],
                                                        legend=True)
  #<<savefig(figname=fig1)>>
  plt.savefig(fig1)
  #plt.close()
  fig1
#+end_src

#+CAPTION: Vg-Vf analysis for the strut extension, \alpha = 1.2
#+NAME: fig:vg_vf_chordextension12
#+ATTR_LATEX: :width 0.65\textwidth 
#+RESULTS: VgVf-CHORD_EXTENSION_tailless25_4
[[file:./img/VgVf-CHORD_EXTENSION_tailless25_4.png]]

\newpage
** Lumped masses case
On this example we move lumped masses on the strut chordwise. As in classical flutter problems, it proves to be a very effective solution. It should be noted, however, that the ranges in which the masses are moved are likely not feasibly due to other physical constraints. Results are shown in Table [[tab:flutter_lumpedmasses]].
# Changing data frame with good values due to the automatic algorithm failing at modes > 10 (tolerance needed in implementation).
#+NAME: FLUTTER-shift_conm2s_tailless25
#+begin_src python  :results raw :exports results
  df_ = results_df[name.split("-")[-1]]
  df_ = df_.rename(columns={"xlabel": "factor (% chord)"})
  df_['flutter_mode']+=1
  df_ = df_.drop(5)
  df_ = df_.iloc[:-1]
  #df_.loc[]
  df_.loc[8, 'flutter_mode'] = 14
  df_.loc[9, 'flutter_mode'] = 14
  df_.loc[9, 'flutter'] = 213.7
  #df_["factor"] = [0.75, 0.9, 1., 1.1, 1.2]
  tabulate(df_, headers=df_.columns,showindex=False, tablefmt='orgtbl')
#+end_src

#+NAME: tab:flutter_lumpedmasses
#+CAPTION:  Flutter assessment when moving strut lumped masses
#+RESULTS: FLUTTER-shift_conm2s_tailless25
| flutter | flutter_mode | factor (% chord) |
|---------+--------------+------------------|
| 170.423 |            3 |                0 |
| 162.767 |            3 |            -0.05 |
| 156.634 |            3 |             -0.1 |
| 151.539 |            3 |            -0.15 |
| 147.136 |            3 |             -0.2 |
| 180.696 |            3 |             0.05 |
|  197.31 |            3 |              0.1 |
| 259.569 |           14 |             0.15 |
|   213.7 |           14 |              0.2 |

*** COMMENT Masses shifted -0.15%
# Carful with index!! not the same as in the table here as rows are deleted
The effect of moving the masses in a
#+NAME: VgVf-shift_conm2s_tailless25_3
#+begin_src python :session py1 :results value file  :exports results 
  fig1 = f"./img/{name}.png"
  results[name.split("-")[-1]]['sol145'].obj.plot_vg_vf(modes=range(1, 16),
                                                        ylim_damping=[-0.04, 0.02],
                                                        ylim_freq=[0.1, 5.8],
                                                        legend=True)
  #<<savefig(figname=fig1)>>
  plt.savefig(fig1)
  plt.close()
  fig1
#+end_src

#+NAME: fig:vg_vf_masses
#+CAPTION: Vg-Vf analysis for moving lumped masses, -0.15% strut chord
#+ATTR_LATEX: :width 0.65\textwidth 
#+RESULTS: VgVf-shift_conm2s_tailless25_3
[[file:./img/VgVf-shift_conm2s_tailless25_3.png]]
*** Masses shifted +0.15%
Interestingly, the effect of moving the masses is that mode 3 (and 4, its anti-symmetric) can be made stable, thereby significantly increasing the flutter speed. This is shown in Fig. [[fig:vg_vf_masses015]].
#+NAME: VgVf-shift_conm2s_tailless25_8
#+begin_src python :session py1 :results value file  :exports results 
  fig1 = f"./img/{name}.png"
  results[name.split("-")[-1]]['sol145'].obj.plot_vg_vf(modes=range(1, 16),
                                                        ylim_damping=[-0.04, 0.02],
                                                        ylim_freq=[0.1, 5.8],
                                                        legend=True)
  #<<savefig(figname=fig1)>>
  plt.savefig(fig1)
  #plt.close()
  fig1
#+end_src

#+NAME: fig:vg_vf_masses015
#+CAPTION: Vg-Vf analysis for moving lumped masses, +0.15% strut chord
#+ATTR_LATEX: :width 0.65\textwidth 
#+RESULTS: VgVf-shift_conm2s_tailless25_8
[[file:./img/VgVf-shift_conm2s_tailless25_8.png]]

*** Masses shifted +0.2%
Illustrated in Fig. [[fig:vg_vf_masses02]], modes 3 and 4 have been damped out, but as modes 13 and 14 (symmetric and anti-symmetric) move down the velocity-axis, the flutter speed is reduced as the masses are further displaced. 
#+NAME: VgVf-shift_conm2s_tailless25_9
#+begin_src python :session py1 :results value file  :exports results 
  fig1 = f"./img/{name}.png"
  results[name.split("-")[-1]]['sol145'].obj.plot_vg_vf(modes=range(1, 16),
                                                        ylim_damping=[-0.01, 0.01],
                                                        ylim_freq=[0.1, 5.8],
                                                        legend=True)
  #<<savefig(figname=fig1)>>
  plt.savefig(fig1)
  #plt.close()
  fig1
#+end_src

#+NAME: fig:vg_vf_masses02
#+ATTR_LATEX: :width 0.65\textwidth 
#+RESULTS: VgVf-shift_conm2s_tailless25_9
[[file:./img/VgVf-shift_conm2s_tailless25_9.png]]

** Parametric aerodynamic placement
Lastly, there might be some room in the placement of the aerodynamic surfaces with respect to the main wing-box or vice-versa. This is modelled by shifting the aerodynamic panels chordwise. Table [[tab:flutter_panels]] shows that this parameter does not affect significantly the stability. 
#+NAME: FLUTTER-shift_panels_tailless25
#+begin_src python  :results raw :exports results
  df_ = results_df[name.split("-")[-1]]
  df_ = df_.rename(columns={"xlabel": "factor"})
  df_['flutter_mode']+=1
  #df_["factor"] = [0.75, 0.9, 1., 1.1, 1.2]
  tabulate(df_, headers=df_.columns,showindex=False, tablefmt='orgtbl')
#+end_src

#+NAME: tab:flutter_panels
#+CAPTION: Flutter assessment when changing the aerodynamic panels location 
#+RESULTS: FLUTTER-shift_panels_tailless25
| flutter | flutter_mode | factor |
|---------+--------------+--------|
| 175.832 |            3 |  -0.25 |
| 174.661 |            3 |   -0.2 |
| 173.519 |            3 |  -0.15 |
| 172.435 |            3 |   -0.1 |
| 170.423 |            3 |      0 |
| 168.685 |            3 |    0.1 |
| 167.887 |            3 |   0.15 |
| 167.071 |            3 |    0.2 |
| 166.447 |            3 |   0.25 |

*** COMMENT Strut aerodynamics shifted -0.2%
#+NAME: VgVf-shift_panels_tailless25_1
#+begin_src python :session py1 :results value file  :exports results 
  fig1 = f"./img/{name}.png"
  results[name.split("-")[-1]]['sol145'].obj.plot_vg_vf(modes=range(1, 16),
                                                        ylim_damping=[-0.05, 0.02],
                                                        ylim_freq=[0.1, 6],
                                                        legend=True)
  #<<savefig(figname=fig1)>>
  plt.savefig(fig1)
  plt.close()
  fig1
#+end_src

#+ATTR_LATEX: :width 0.65\textwidth 
#+RESULTS: VgVf-shift_panels_tailless25_1
[[file:./img/VgVf-shift_panels_tailless25_1.png]]

*** COMMENT Strut aerodynamics shifted +0.2%
#+NAME: VgVf-shift_panels_tailless25_7
#+begin_src python :session py1 :results value file  :exports results 
  fig1 = f"./img/{name}.png"
  results[name.split("-")[-1]]['sol145'].obj.plot_vg_vf(modes=range(1, 16),
                                                        ylim_damping=[-0.03, 0.08],
                                                        ylim_freq=[0.1, 6],
                                                        legend=True)
  #<<savefig(figname=fig1)>>
  plt.savefig(fig1)
  plt.close()
  fig1
#+end_src

#+ATTR_LATEX: :width 0.65\textwidth 
#+RESULTS: VgVf-shift_panels_tailless25_7
[[file:./img/VgVf-shift_panels_tailless25_7.png]]

* Conclusions

- We have just carried out a preliminary parametric analysis around the possibilities to increase 

  
  
