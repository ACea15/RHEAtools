#+TITLE: High Fidelity Flutter Assessment of a Strut-Braced Wing Aircraft
#+AUTHOR: Alvaro Cea and Rafael Palacios
#+OPTIONS: toc:nil
#+LATEX_HEADER: \usepackage[margin=1in]{geometry}

#+begin_comment
#+LATEX_HEADER: \let\oldsection\section
#+LATEX_HEADER: \renewcommand{\section}{\clearpage\oldsection}
#+LATEX_HEADER: \let\oldsubsection\subsection
#+LATEX_HEADER: \renewcommand{\subsection}{\clearpage\oldsubsection}
#+end_comment

* House keeping :noexport:
#+begin_src elisp :results none :tangle no :exports none
  (add-to-list 'org-structure-template-alist
    '("sp" . "src python :session py1"))
  (add-to-list 'org-structure-template-alist
    '("se" . "src elisp"))

  (setq org-confirm-babel-evaluate nil)
  (setq org-latex-pdf-process (list "latexmk -f -pdf -interaction=nonstopmode -output-directory=%o %f"))
  (setq org-image-actual-width nil)

  (defun org/get-headline-string-element  (headline backend info)
    (let ((prop-point (next-property-change 0 headline)))
      (if prop-point (plist-get (text-properties-at prop-point headline) :parent))))

  (defun org/ensure-latex-clearpage (headline backend info)
    (when (org-export-derived-backend-p backend 'latex)
      (let ((elmnt (org/get-headline-string-element headline backend info)))
        (when (member "newpage" (org-element-property :tags elmnt))
          (concat "\\clearpage\n" headline)))))

  (add-to-list 'org-export-filter-headline-functions
               'org/ensure-latex-clearpage)

  (setq local_root (concat default-directory "../../"))
#+end_src

#+begin_src emacs-lisp  :session py1 :results none :tangle nil :exports none
  (pyvenv-workon "nastran")
  (require 'org-tempo)
#+end_src
* Load modules :noexport:
#+begin_src python :session py1 :results none :var dir1=(print local_root)
  import sys
  sys.path.append(dir1)
  import src.parametric_analysis
  import plotly.express as px
  import pandas as pd
  import pathlib
  import matplotlib.pyplot as plt
  from tabulate import tabulate
#+end_src
* Boilerplate src :noexport:
#+name: pd2org
#+begin_src python :var df="df" :exports none
  return f"return tabulate({df}, headers={df}.columns, tablefmt='orgtbl')"
#+end_src

#+RESULTS: pd2org
: return tabulate(df, headers=df.columns, tablefmt='orgtbl')

#+name: savefig
#+begin_src python :var figname="plot.svg" width=5 height=5 :exports none
  return f"""plt.savefig('{figname}')
  '{figname}'"""
#+end_src

#+RESULTS: savefig
: plt.savefig('plot.svg')
: 'plot.svg'

* Read results :noexport:
:PROPERTIES:
:header-args: :eval never-export :exports none
:END:

#+RESULTS:

#+begin_src python :session py1  :results value

  def get_files(folder_path):

      file_paths = []
      file_names = []
      _dir = pathlib.Path(folder_path)
      for i in _dir.glob("**/*.f06"):
          file_paths.append(str(i))
          file_names.append(i.parent.name)
      return file_paths, file_names

  main_folder = '/'.join(([si for si in sys.path if "RHEAtools" in si][0].split('/')[:[si for si
                            in sys.path if "RHEAtools" in si][0].split('/').index("RHEAtools")+1]))
  main_folder += "/data/nastran_studies/parametric_analysis078M"
  #main_folder += "/data/out/parametric_analysis078M"
  file_paths, file_names = get_files(main_folder)
  #main_folder = "/home/acea/pCloudDrive/Imperial/PostDoc/models_POLIMI/"
  #main_folder = "/Users/acea/pCloud Drive/Imperial/PostDoc/models_POLIMI/"
  #files = []
  # files += [f"shift_conm2s_M15_{xi}" for xi in range(11)]
  # files += [f"shift_conm2s_M25_{xi}" for xi in range(11)]
  # files += [f"shift_conm2s_LM15_{xi}" for xi in range(11)]
  # files += [f"shift_conm2s_LM25_{xi}" for xi in range(11)]
  # #files += [f"shift_conm2s_oldM8_{xi}" for xi in range(11)]
  # files += [f"shift_conm2s_oldM15_{xi}" for xi in range(11)]
  # files += [f"shift_conm2s_oldM25_{xi}" for xi in range(11)]

  # # files += [f"shift_panels3_{xi}" for xi in [-0.25, -0.2, -0.15, -0.1, 0.,  0.1, 0.15, 0.2, 0.25]]
  # files += [f"shift_panels_M15_{xi}" for xi in range(len([-0.25, -0.2, -0.15, -0.1, 0.,  0.1, 0.15, 0.2, 0.25]))]
  # files += [f"shift_panels_M25_{xi}" for xi in range(len([-0.25, -0.2, -0.15, -0.1, 0.,  0.1, 0.15, 0.2, 0.25]))]
  # files += [f"shift_panels_LM15_{xi}" for xi in range(len([-0.25, -0.2, -0.15, -0.1, 0.,  0.1, 0.15, 0.2, 0.25]))]
  # files += [f"shift_panels_LM25_{xi}" for xi in range(len([-0.25, -0.2, -0.15, -0.1, 0.,  0.1, 0.15, 0.2, 0.25]))]
  # #files += [f"shift_panels_oldM8_{xi}" for xi in range(len([-0.25, -0.2, -0.15, -0.1, 0.,  0.1, 0.15, 0.2, 0.25]))]
  # files += [f"shift_panels_oldM15_{xi}" for xi in range(len([-0.25, -0.2, -0.15, -0.1, 0.,  0.1, 0.15, 0.2, 0.25]))]
  # files += [f"shift_panels_oldM25_{xi}" for xi in range(len([-0.25, -0.2, -0.15, -0.1, 0.,  0.1, 0.15, 0.2, 0.25]))]

  # ######
  #files += [f"CHORD_EXTENSION_tailless10_{xi}" for xi in range(len([0.7, 0.85, 1., 1.1, 1.2, 1.3]))]
  # files += [f"CHORD_EXTENSION_tailless15_{xi}" for xi in range(len([0.7, 0.85, 1., 1.1, 1.2]))]
  # files += [f"CHORD_EXTENSION_tailless25_{xi}" for xi in range(len([0.7, 0.85, 1., 1.1, 1.2]))]

  # files += [f"CHORD_EXTENSION_M25_{xi}" for xi in range(len([0.7, 0.85, 1., 1.1, 1.2, 1.3]))]
  # files += [f"CHORD_EXTENSION_LM15_{xi}" for xi in range(len([0.7, 0.85, 1., 1.1, 1.2, 1.3]))]
  # files += [f"CHORD_EXTENSION_LM25_{xi}" for xi in range(len([0.7, 0.85, 1., 1.1, 1.2, 1.3]))]
  # #files += [f"CHORD_EXTENSION_oldM8_{xi}" for xi in range(len([0.7, 0.85, 1., 1.1, 1.2, 1.3]))]
  # files += [f"CHORD_EXTENSION_oldM15_{xi}" for xi in range(len([0.7, 0.85, 1., 1.1, 1.2, 1.3]))]
  # files += [f"CHORD_EXTENSION_oldM25_{xi}" for xi in range(len([0.7, 0.85, 1., 1.1, 1.2, 1.3]))]

  collector_list = ['sol145']
  collector = {ci: None for ci in collector_list}
  # #results = src.parametric_analysis.build_flutter(main_folder, files, Modes=range(10), collector=collector)
  results = src.parametric_analysis.build_flutter2(file_paths, file_names, Modes=range(10), collector=collector)

  def get_parametric_vars(vars_set, file_names):
      parametric_vars = dict()
      for fi in file_names:
          var = '_'.join(fi.split("_")[:-1])
          for ki, vi in vars_set.items():
              if ki in var and var not in parametric_vars.keys():
                  parametric_vars[var] = vi
      return parametric_vars

  vars_set = dict(shift_conm2s=[0., -0.05, -0.1, -0.15, -0.2, -0.25, 0.05, 0.1, 0.15, 0.2, 0.25],
                  CHORD_EXTENSION=[0.7, 0.85, 1., 1.1, 1.2, 1.3],
                  shift_panels_tailless=[-0.25, -0.2, -0.15, -0.1, 0.,  0.1, 0.15, 0.2, 0.25])
  parametric_vars = get_parametric_vars(vars_set, file_names)
  # parametric_vars = {}
  # parametric_vars = {f"shift_conm2s_M{i}": [0., -0.05, -0.1, -0.15, -0.2, -0.25, 0.05, 0.1, 0.15, 0.2, 0.25] for i in [15, 25]}
  # parametric_vars = {f"shift_conm2s_oldM{i}": [0., -0.05, -0.1, -0.15, -0.2, -0.25, 0.05, 0.1, 0.15, 0.2, 0.25] for i in [15, 25]}
  # parametric_vars.update({f"shift_panels_M{i}": [-0.25, -0.2, -0.15, -0.1, 0.,  0.1, 0.15, 0.2, 0.25] for i in [15, 25]})
  # parametric_vars.update({f"shift_panels_oldM{i}": [-0.25, -0.2, -0.15, -0.1, 0.,  0.1, 0.15, 0.2, 0.25] for i in [15, 25]})
  # parametric_vars.update({f"CHORD_EXTENSION_M{i}": [0.7, 0.85, 1., 1.1, 1.2, 1.3] for i in [15, 25]})
  # parametric_vars.update({f"shift_conm2s_LM{i}": [0., -0.05, -0.1, -0.15, -0.2, -0.25, 0.05, 0.1, 0.15, 0.2, 0.25] for i in [15, 25]})
  # parametric_vars.update({f"shift_panels_LM{i}": [-0.25, -0.2, -0.15, -0.1, 0.,  0.1, 0.15, 0.2, 0.25] for i in [15, 25]})
  #parametric_vars.update({f"CHORD_EXTENSION_tailless{i}": [0.7, 0.85, 1., 1.1, 1.2] for i in [15, 25]})
  # parametric_vars.update({f"CHORD_EXTENSION_oldM{i}": [0.7, 0.85, 1., 1.1, 1.2, 1.3] for i in [25]})

  results_df = src.parametric_analysis.build_results_df(file_names,
                                                        parametric_vars,
                                                        results)
  "Data read!"
#+end_src

#+RESULTS:
: Data read!


* Introduction

#+CAPTION: SBW challenges  
#+ATTR_LATEX: :width 0.75\textwidth 
[[./img/SBW_challenges.png]]

* Methods
** Frequency domain aerodynamics
** Fluid-structure interpolation
** Flutter P-K method
* Computational process and tools
** SU2 implementation
** Mapping and deformation of aerodynamic mesh
Process built to create modal shapes:
- Run Nastran 103 solution.
- Read the beam and rigid connectors (RBE2s) positions from .bdf file and corresponding displacements from .op2 file.
- Select a number of chordwise divisions and build the data matrix of locations and displacements.
- Create Paraview file from data.

#+ATTR_LATEX: :width 0.8\textwidth 
[[./img/interpolation.pdf]]
** Parametric Nastran models and flutter
** Main interface
* Structural and aerodynamic models
- Framework in place to map data between structural and aerodynamic models
- Parameterised Nastran model for the strut in order to increase flutter.  
- Current mismatch in strut-wing attachment point between aerodynamic mesh and structural model.
- Aerodynamic mesh deformed with modal shapes from in-house Nastran post-processor. 
  
#+CAPTION: Combined models from ONERA (CFD mesh) and and POLIMI (panels representation from structural model)
#+ATTR_LATEX: :width 0.85\textwidth 
[[./img/su2_polimi-ref.png]]

\newpage
** Mesh deformation of modal shapes
#+CAPTION: Deformed mesh (in blue), aerodynamic panels (red-green) and reference mesh for mode one
#+ATTR_LATEX: :width 0.99\textwidth 
[[./img/M0-15A-3D_Panels.png]]

#+CAPTION: 
#+ATTR_LATEX: :width 0.99\textwidth 
[[./img/modes.pdf]]


#+CAPTION: Deformed mesh (in blue), aerodynamic panels (red-green) and reference mesh for mode one
#+ATTR_LATEX: :width 0.99\textwidth 
[[./img/M0-15A-3D_Panels.png]]

#+CAPTION: Deformed mesh (in blue), aerodynamic panels (red-green) and reference mesh for mode five
#+ATTR_LATEX: :width 0.99\textwidth 
[[./img/M4-15A-3D_Panels.png]]


\newpage
** CFD steady simulations in SU2

SU2 meshh produced from ONERA model by our partners at Strathclyde. Comparisons carried out for RANS simulations. We use Euler solvers for flutter and the following steady simulations are reasonable.

#+CAPTION: Cp field, mode one, front view
#+ATTR_LATEX: :width 0.99\textwidth 
[[./img/M0-15A-STEADY.pdf]]

#+CAPTION: Cp field, mode one, front view
#+ATTR_LATEX: :width 1.\textwidth 
[[./img/M4-15A-STEADY.pdf]]

#+CAPTION: Cp field, mode one, front view
#+ATTR_LATEX: :width 1.\textwidth 
[[./img/M7-15A-STEADY.pdf]]



\newpage
* Baseline Flutter analysis 
:PROPERTIES:
:header-args: :var name=(org-element-property :name (org-element-context)) :session py1
:END:

- Cruise analysis ($U_\infty = 252.8 m/s$ $M_\infty = 0.78$, $Altitude = 7000 m$)
- Flutter speed:  \approx 170 m/s (33% below cruise speed)

#+NAME: FLUTTER-baseline
#+begin_src python  :results raw :exports results
  modes_influtter  = [6, 10, 15, 25]
  gafs_flutter = [173.0, 165.0, 169.7, 170.4]
  flutter_speeds = [results[f'shift_conm2s_tailless{i}_0']['FlutterSpeed'] for i in modes_influtter]
  df_  = pd.DataFrame({'Num. Modes': modes_influtter, 'flutter Nastran':flutter_speeds,
                       'flutter GAFs': gafs_flutter})
  #df_ = df_.rename(columns={"xlabel": "factor"})
  #df_['flutter_mode']+=1
  #df_["factor"] = [0.75, 0.9, 1., 1.1, 1.2]
  tabulate(df_, headers=df_.columns,showindex=False, tablefmt='orgtbl')
  #plt.plot(modes_influtter, flutter_speeds)
#+end_src

#+CAPTION: Flutter analysis calculated via direct Nastran and GAFs
#+RESULTS: FLUTTER-baseline
| Num. Modes | flutter Nastran | flutter GAFs |
|------------+-----------------+--------------|
|          6 |         173.027 |          173 |
|         10 |         164.922 |          165 |
|         15 |         169.786 |        169.7 |
|         25 |         170.423 |        170.4 |

#+NAME: VgVfref-shift_conm2s_tailless25_0
#+begin_src python  :results value file  :exports results 
  fig1 = f"./img/{name}.png"
  results[name.split("-")[-1]]['sol145'].obj.plot_vg_vf(modes=range(1, 16),
                                                        ylim_damping=[-0.02, 0.03],
                                                        ylim_freq=[0.2, 5.5],
                                                        legend=True)
  #<<savefig(figname=fig1)>>
  plt.savefig(fig1)
  #plt.close()
  fig1
#+end_src

#+CAPTION: Vg-Vf analysis in for the reference configuration
#+ATTR_LATEX: :width 0.65\textwidth 
#+RESULTS: VgVfref-shift_conm2s_tailless25_0
[[file:./img/VgVfref-shift_conm2s_tailless25_0.png]]


** Flutter via GAFS
#+CAPTION: GAFs of the first 5 modes, reduced frequencies from 0 to 1, imaginary (circles) and real (squares) parts.
#+ATTR_LATEX: :width 0.8\textwidth
[[./img/GAFs5x5.pdf]]

#+CAPTION: Root locus analysis in for the reference configuration using the GAFs
#+ATTR_LATEX: :width 0.9\textwidth
[[./img/root_locus.pdf]]

#+CAPTION: Vg-Vf analysis in for the reference configuration using the GAFs
#+ATTR_LATEX: :width 0.99\textwidth
[[./img/vgvf.pdf]]

*** CFD-enhanced analysis

\newpage
* Parametric analysis for flutter relief
:PROPERTIES:
:header-args: :var name=(org-element-property :name (org-element-context)) :session py1
:END:
- Design approaches to increase flutter:
  - Increase the strut size
  - Shifting of panels
  - Movement of masses

** Strut-stretching case


A Factor, $\alpha$, is applied to the aerodynamic chord along the strut, while the thickness to chord ratio of the airfoils is kept constant. The structural model is scaled accordingly, increasing the beam area by $\alpha^2$ and the moment of inertia by $\alpha^4$.

#+NAME: FLUTTER-CHORD_EXTENSION_tailless25
#+begin_src python :session py1 :results raw :exports results
  df_ = results_df[name.split("-")[-1]]
  df_ = df_.rename(columns={"xlabel": "factor"})
  df_['flutter_mode']+=1
  df_ = df_.iloc[1:-1] 
  #df_["factor"] = [0.75, 0.9, 1., 1.1, 1.2]
  tabulate(df_, headers=df_.columns,showindex=False, tablefmt='orgtbl')
#+end_src

#+NAME: table_flutter_chordextension
#+CAPTION: Flutter assessment when changing the strut chord
#+RESULTS: FLUTTER-CHORD_EXTENSION_tailless25
| flutter | flutter_mode | factor |
|---------+--------------+--------|
| 152.665 |            5 |   0.85 |
| 170.423 |            3 |      1 |
| 203.342 |            3 |    1.1 |
| 193.152 |           10 |    1.2 |


*** Factor= 0.85
#+NAME: VgVf-CHORD_EXTENSION_tailless25_1
#+begin_src python  :results value file  :exports results 
  fig1 = f"./img/{name}.png"
  results[name.split("-")[-1]]['sol145'].obj.plot_vg_vf(modes=range(1, 16),
                                                        ylim_damping=[-0.07, 0.03],
                                                        ylim_freq=[0.1, 5.],
                                                        legend=True)
  #<<savefig(figname=fig1)>>
  plt.savefig(fig1)
  #plt.close()
  fig1
#+end_src

#+ATTR_LATEX: :width 0.65\textwidth 
#+RESULTS: VgVf-CHORD_EXTENSION_tailless25_1
[[file:./img/VgVf-CHORD_EXTENSION_tailless25_1.png]]


*** Factor= 1.1

#+NAME: VgVf-CHORD_EXTENSION_tailless25_3
#+begin_src python  :results value file  :exports results 
  fig1 = f"./img/{name}.png"
  results[name.split("-")[-1]]['sol145'].obj.plot_vg_vf(modes=range(1, 16),
                                                        ylim_damping=[-0.07, 0.03],
                                                        ylim_freq=[0.1, 5.],
                                                        legend=True)
  #<<savefig(figname=fig1)>>
  plt.savefig(fig1)
  #plt.close()
  fig1
#+end_src

#+ATTR_LATEX: :width 0.65\textwidth 
#+RESULTS: VgVf-CHORD_EXTENSION_tailless25_3
[[file:./img/VgVf-CHORD_EXTENSION_tailless25_3.png]]


\newpage
** Lumped masses case

# Changing data frame with good values due to the automatic algorithm failing at modes > 10 (tolerance needed in implementation).

#+NAME: FLUTTER-shift_conm2s_tailless25
#+begin_src python  :results raw :exports results
  df_ = results_df[name.split("-")[-1]]
  df_ = df_.rename(columns={"xlabel": "factor (% chord)"})
  df_['flutter_mode']+=1
  df_ = df_.drop(5)
  df_ = df_.iloc[:-1]
  #df_.loc[]
  df_.loc[8, 'flutter_mode'] = 14
  df_.loc[9, 'flutter_mode'] = 14
  df_.loc[9, 'flutter'] = 213.7
  #df_["factor"] = [0.75, 0.9, 1., 1.1, 1.2]
  tabulate(df_, headers=df_.columns,showindex=False, tablefmt='orgtbl')
#+end_src

#+CAPTION:  Flutter assessment when moving strut lumped masses
#+RESULTS: FLUTTER-shift_conm2s_tailless25
| flutter | flutter_mode | factor (% chord) |
|---------+--------------+------------------|
| 170.423 |            3 |                0 |
| 162.767 |            3 |            -0.05 |
| 156.634 |            3 |             -0.1 |
| 151.539 |            3 |            -0.15 |
| 147.136 |            3 |             -0.2 |
| 180.696 |            3 |             0.05 |
|  197.31 |            3 |              0.1 |
| 259.569 |           14 |             0.15 |
| 240.116 |           14 |              0.2 |

#+CAPTION: Flutter assessment when moving the strut masses

*** Masses shifted -0.15%
# Carful with index!! not the same as in the table here as rows are deleted
#+NAME: VgVf-shift_conm2s_tailless25_3
#+begin_src python :session py1 :results value file  :exports results 
  fig1 = f"./img/{name}.png"
  results[name.split("-")[-1]]['sol145'].obj.plot_vg_vf(modes=range(1, 16),
                                                        ylim_damping=[-0.04, 0.02],
                                                        ylim_freq=[0.1, 5.8],
                                                        legend=True)
  #<<savefig(figname=fig1)>>
  plt.savefig(fig1)
  plt.close()
  fig1
#+end_src

#+ATTR_LATEX: :width 0.65\textwidth 
#+RESULTS: VgVf-shift_conm2s_tailless25_3
[[file:./img/VgVf-shift_conm2s_tailless25_3.png]]

*** Masses shifted +0.15%
#+NAME: VgVf-shift_conm2s_tailless25_8
#+begin_src python :session py1 :results value file  :exports results 
  fig1 = f"./img/{name}.png"
  results[name.split("-")[-1]]['sol145'].obj.plot_vg_vf(modes=range(1, 16),
                                                        ylim_damping=[-0.04, 0.02],
                                                        ylim_freq=[0.1, 5.8],
                                                        legend=True)
  #<<savefig(figname=fig1)>>
  plt.savefig(fig1)
  #plt.close()
  fig1
#+end_src

#+ATTR_LATEX: :width 0.65\textwidth 
#+RESULTS: VgVf-shift_conm2s_tailless25_8
[[file:./img/VgVf-shift_conm2s_tailless25_8.png]]


*** Masses shifted +0.2%
#+NAME: VgVf-shift_conm2s_tailless25_9
#+begin_src python :session py1 :results value file  :exports results 
  fig1 = f"./img/{name}.png"
  results[name.split("-")[-1]]['sol145'].obj.plot_vg_vf(modes=range(1, 16),
                                                        ylim_damping=[-0.01, 0.01],
                                                        ylim_freq=[0.1, 5.8],
                                                        legend=True)
  #<<savefig(figname=fig1)>>
  plt.savefig(fig1)
  #plt.close()
  fig1
#+end_src

#+ATTR_LATEX: :width 0.65\textwidth 
#+RESULTS: VgVf-shift_conm2s_tailless25_9
[[file:./img/VgVf-shift_conm2s_tailless25_9.png]]


\newpage
** Parametric aerodynamic placement
#+NAME: FLUTTER-shift_panels_tailless25
#+begin_src python  :results raw :exports results
  df_ = results_df[name.split("-")[-1]]
  df_ = df_.rename(columns={"xlabel": "factor"})
  df_['flutter_mode']+=1
  #df_["factor"] = [0.75, 0.9, 1., 1.1, 1.2]
  tabulate(df_, headers=df_.columns,showindex=False, tablefmt='orgtbl')
#+end_src

#+CAPTION: Flutter assessment when changing the aerodynamic panels location 
#+RESULTS: FLUTTER-shift_panels_tailless25
| flutter | flutter_mode | factor |
|---------+--------------+--------|
| 175.832 |            3 |  -0.25 |
| 174.661 |            3 |   -0.2 |
| 173.519 |            3 |  -0.15 |
| 172.435 |            3 |   -0.1 |
| 170.423 |            3 |      0 |
| 168.685 |            3 |    0.1 |
| 167.887 |            3 |   0.15 |
| 167.071 |            3 |    0.2 |
| 166.447 |            3 |   0.25 |

*** Strut aerodynamics shifted -0.2%
#+NAME: VgVf-shift_panels_tailless25_1
#+begin_src python :session py1 :results value file  :exports results 
  fig1 = f"./img/{name}.png"
  results[name.split("-")[-1]]['sol145'].obj.plot_vg_vf(modes=range(1, 16),
                                                        ylim_damping=[-0.03, 0.02],
                                                        ylim_freq=[0.1, 6],
                                                        legend=True)
  #<<savefig(figname=fig1)>>
  plt.savefig(fig1)
  plt.close()
  fig1
#+end_src

#+ATTR_LATEX: :width 0.65\textwidth 
#+RESULTS: VgVf-shift_panels_tailless25_1
[[file:./img/VgVf-shift_panels_tailless25_1.png]]

*** Strut aerodynamics shifted +0.2%
#+NAME: VgVf-shift_panels_tailless25_7
#+begin_src python :session py1 :results value file  :exports results 
  fig1 = f"./img/{name}.png"
  results[name.split("-")[-1]]['sol145'].obj.plot_vg_vf(modes=range(1, 16),
                                                        ylim_damping=[-0.3, 0.08],
                                                        ylim_freq=[0.1, 6],
                                                        legend=True)
  #<<savefig(figname=fig1)>>
  plt.savefig(fig1)
  plt.close()
  fig1
#+end_src

#+ATTR_LATEX: :width 0.65\textwidth 
#+RESULTS: VgVf-shift_panels_tailless25_7
[[file:./img/VgVf-shift_panels_tailless25_7.png]]

* Conclusions

- We have just carried out a preliminary parametric analysis around the possibilities to increase 

  
  
